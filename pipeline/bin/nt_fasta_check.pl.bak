#!/usr/bin/perl

eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell
BEGIN{foreach (@INC) {s/\/usr\/local\/packages/\/local\/platform/}};
use lib (@INC,$ENV{"PERL_MOD_DIR"});
use lib (@INC,$ENV{"LIB_INFO_MOD"});
no lib "$ENV{PERL_MOD_DIR}/i686-linux";
no lib ".";

=head1 NAME
   nt_fasta_check.pl 

=head1 SYNOPSIS

    USAGE: nt_fasta_check.pl 
                
=head1 OPTIONS
   
B<--fasta,-f>
    input fasta file
    
B<--output,-o>
    output file name
    
B<--help,-h>
   This help message

=head1  DESCRIPTION
    
=head1  INPUT
    
=head1  OUTPUT
   
=head1  CONTACT
  

==head1 EXAMPLE
   nt_fasta_check.pl 

=cut


use strict;
use Switch;
use File::Basename;
use Data::Dumper;
use LIBInfo;
use Pod::Usage;
use Getopt::Long qw(:config no_ignore_case no_auto_abbrev pass_through);

BEGIN {
  use Ergatis::Logger;
}

my %options = ();
my $results = GetOptions (\%options,
                          'fasta|f=s',
                          'outdir|o=s',
			  'libList|ll=s',
			  'libFile|lf=s',
                          'log|l=s',
                          'debug|d=s',
                          'help|h') || pod2usage();

## display documentation
if( $options{'help'} ){
    pod2usage( {-exitval => 0, -verbose => 2, -output => \*STDERR} );
}

my $logfile = $options{'log'} || Ergatis::Logger::get_default_logfilename();
my $logger = new Ergatis::Logger('LOG_FILE'=>$logfile,
                                  'LOG_LEVEL'=>$options{'debug'});
$logger = $logger->get_logger();
#############################################################################
#### DEFINE GLOBAL VAIRABLES.
##############################################################################
## make sure everything passed was peachy
&check_parameters(\%options);

my $state=0;
my $count_seq=0;
my $line_number=0;
my $seq_buf="";
my @suffixes = (".fsa",".fasta",".txt");
my $filebase = basename($options{fasta},@suffixes);
my($warn1,$warn2,$warn3,$warn4);


my $final_output=$options{outdir}."/".$filebase.".fsa";
my $ref_file=$options{outdir}."/".$filebase.".ref";

my $libinfo = LIBInfo->new();
my $libObject;

if ($options{libList} && $options{libFile}){
	$logger->debug("Can not use both library list file and library file.  Using library file\n");
	$libObject = $libinfo->getLibFileInfo($options{libFile});	
} elsif ((defined $options{libFile}) && (length($options{libFile}))){
	$libObject = $libinfo->getLibFileInfo($options{libFile});
} elsif ((defined $options{libList}) && (length($options{libList}))){
	$libObject = $libinfo->getLibListInfo($options{libList});
} else {
	$logger->logdie("Library list file or library file not defined");
	exit(-1);
}
##############################################################################

open (INFO, $options{fasta}) or logger->logdie("Cannot open input file $options{fasta} dddd\n");
open(FOUT,">$final_output") or logger->logdie("Cannot open output file $final_output\n");
open(UFO, ">$ref_file") or logger->logdie("Cannot open ref output file $ref_file\n");

my $new_name = '';
while (<INFO>)
{
  chomp $_;
  my $line = $_;
  
  $line_number++;
  my $first_char = substr($line,0,1);
	
      switch ($state) {
	  case 0 
	      { 
		  if($first_char eq ">")
		  {
		      $state=1;
		      $count_seq++;
		      $new_name =  &name_modifier($line, $libObject->{prefix});
		      print $libObject->{prefix}."\t".$new_name."\n";
		  }
		  else
		  {
		      print STDERR "Does not start with a name at line no. $line_number with first_char = $first_char.\n@ $line";
		      exit(254);
		  }
	      }
	  case 1
	      {
		  if($first_char eq ">")
		  {
		      if(length($seq_buf) != 0){
			  &freq_cal($seq_buf, $new_name);
			  print FOUT $new_name."\n".$seq_buf."\n";
			  $seq_buf="";
			  $count_seq++;
			  $new_name =  &name_modifier($line, $libObject->{prefix});
			  print $libObject->{prefix}."\t".$new_name."\n";
		      }
		      else{
			  print STDERR "Missing Sequence at line $line_number with char $first_char \n@ $line";
			  exit(254);
		      }
		  }
		  else
		  {
		      $seq_buf=$seq_buf.$line;
		  }
	      }
      }
}


if($warn1/$count_seq>0.05)
{	print STDERR "ERROR 255: Number of ATCG minor warnings exceeds 5\% (".$warn1/$count_seq.")\n";
	return 255;
}
if($warn2/$count_seq>0.03)
{	print STDERR "ERROR 256: Number of ATCG major warnings exceeds 3\% (".$warn2/$count_seq.")\n";
        return 256;
}
if($warn3/$count_seq>0.05)
{	print STDERR "ERROR 257: Number of N minor warnings exceeds 5\% (".$warn3/$count_seq.")\n";
        return 257;
}
if($warn4/$count_seq>0.03)
{	print STDERR "ERROR 258: Number of N major warnings exceeds 3\% (".$warn4/$count_seq.")\n";
        return 258;
}



close(FOUT);
close(UFO);
close(INFO);

###############################################################################
####  SUBS
###############################################################################
sub check_parameters {
    my $options = shift;

    ## make sure sample_file and output_dir were passed
    unless ($options{fasta} && $options{outdir}) {
      pod2usage({-exitval => 2,  -message => "error message", -verbose => 1, -output => \*STDERR});
      $logger->logdie("Inputs not defined, plesae read perldoc $0\n");
      exit(-1);
    }
}

###############################################################################
sub name_modifier{
      my @part_name = split(/ /,$_[0]);
      $part_name[0] =~ s/_/-/g;
      
      my $name = '>'.$_[1] . '_'. substr($part_name[0],1);	
      print UFO "$name \t $_[0]\n";
      return $name;
}

###############################################################################
sub freq_cal
{
      #print "$_[0]\n";
      my $len = length $_[0];
      my $seq_name = substr($_[1],4);
      my $common = 0;
      my $n = 0;
      my $threshold=0;
      for (my $i = 0; $i <= $len; $i++)	
      {
	  my $single_char = substr($_[0],$i,1);
	  if ($single_char == "A"){
			  #print "Valid base";
	  }
	  elsif ($single_char == "T"){
			  #print "valid base";
	  }
	  elsif ($single_char == "C"){
			  #print "valid base";
	  }
	  elsif ($single_char == "G"){
			  #print "valid base";
	  }
	  elsif ($single_char == "N"){
			  #print "valid base";
	  }
	  elsif ($single_char == "R"){
			  #print "valid base";
	  }
	  elsif ($single_char == "Y"){
			  #print "valid base";
	  }
	  elsif ($single_char == "S"){
			  #print "valid base";
	  }
	  elsif ($single_char == "W"){
			  #print "valid base";
	  }
	  elsif ($single_char == "K"){
			  #print "valid base";
	  }
	  elsif ($single_char == "M"){
			  #print "valid base";
	  }
	  elsif ($single_char == "B"){
			  #print "valid base";
	  }
	  elsif ($single_char == "D"){
			  #print "valid base";
	  }
	  elsif ($single_char == "H"){
			  #print "valid base";
	  }
	  elsif ($single_char == "V"){
			  #print "valid base";
	  }
	  else  {
		  print STDERR "Invalid base";
	  }
			  
	  switch ($single_char){
	      case "A" {
		  $common++
	      }
	      case "T" {
		  $common++
	      }
	      case "C" {
		  $common++
	      }
	      case "G" {
		  $common++
	      }
	      case "N"{
		  $n++
	      }			
	  }		
      }
      
      #print "$common $n \n ";
      my $freq_atcg = ($common/$len)*100;
      my $freq_n = ($n/$len)*100;
      
      if($freq_atcg<97){
	      print STDERR "Warning (Minor) for ATCG Frequency (".$freq_atcg."\%) for seq id: $seq_name\n$_[0]\n";
		$warn1++;
      }			
      if($freq_atcg<93){
	      print STDERR "Warning (Major) for ATCG Frequency (".$freq_atcg."\%) for seq id: $seq_name\n$_[0]\n";
	      $warn2++;
      }
      if($freq_n>5){
	      print STDERR "Warning (Major) for N frequency (".$freq_n."\%)  for seq id: $seq_name\n$_[0]\n";
	      $warn4++;
      }
      if($freq_n>2){
	      print STDERR "Warning (Minor) for N frequncy (".$freq_n."\%) for seq id: $seq_name\n$_[0]\n";
		$warn3++;
      }	
}
